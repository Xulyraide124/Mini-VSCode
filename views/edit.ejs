<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Édition de <%= fileName %> - Mini-VSCode</title>
    <!-- Lien vers le fichier CSS principal pour le thème VSCode -->
    <!-- Thème monokai pour Ace Editor (via CDN) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/theme-monokai.min.css">
    <style>
        /* Styles spécifiques pour Ace Editor et les éléments de la page d'édition */
        /* Ces styles sont ici pour des ajustements précis sur cette page, en complément de style.css */

        /* Variables CSS (définies dans style.css, mais rappelées ici pour clarté si besoin) */
        /* :root {
            --vscode-bg-dark: #1a1a1a;
            --vscode-bg-medium: #222222;
            --vscode-bg-light: #303030;
            --vscode-text-light: #e0e0e0;
            --vscode-text-medium: #a0a0a0;
            --vscode-accent-blue: #007acc;
            --vscode-accent-green: #4CAF50;
            --vscode-border: #383838;
            --vscode-shadow-light: rgba(0, 0, 0, 0.2);
            --vscode-shadow-medium: rgba(0, 0, 0, 0.4);
        } */
         body {
            font-family: 'Inter', sans-serif; /* Police principale */
            background-color: var(--vscode-bg-dark); /* Fond principal sombre */
            
         }

        #editor {
            width: 100%;
            height: 60vh; /* Hauteur de l'éditeur, ajustable */
            border: 1px solid var(--vscode-border); /* Utilise la variable de bordure du thème */
            border-radius: 6px; /* Bords légèrement arrondis */
            margin-bottom: 25px; /* Marge inférieure accrue */
            font-family: 'Fira Code', 'Cascadia Code', monospace; /* Police de caractères pour le code */
            font-size: 16px;
            box-shadow: inset 0 1px 5px var(--vscode-shadow-light); /* Ombre interne subtile */
            transition: border-color 0.2s ease, box-shadow 0.2s ease; /* Transitions pour le focus */
        }

        #editor:focus-within {
            border-color: var(--vscode-accent-blue); /* Bordure bleue au focus */
            box-shadow: inset 0 1px 5px var(--vscode-shadow-medium), 0 0 0 2px rgba(0, 122, 204, 0.3); /* Ombre et halo bleu */
        }

        /* Masque le textarea caché utilisé pour envoyer le contenu au serveur */
        #hiddenEditorContent {
            display: none;
        }

        /* Styles pour les messages de succès */
        .success-message {
            color: #a7d9b7; /* Vert clair sur fond sombre */
            background-color: #2e4a35; /* Fond vert foncé */
            border: 1px solid #3c6e45;
            padding: 15px 25px; /* Padding augmenté */
            border-radius: 8px;
            margin-bottom: 30px; /* Marge inférieure augmentée */
            font-weight: 600;
            font-size: 1.05em;
            box-shadow: 0 2px 8px var(--vscode-shadow-light); /* Ombre pour le message */
            animation: fadeIn 0.5s ease-out; /* Animation d'apparition */
            text-align: center;
        }

        /* Animation pour les messages */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Ajustements pour les titres dans le thème sombre */
        h1 {
            color: var(--vscode-text-light); /* Utilise la couleur de texte claire du thème */
            margin-top: 0; /* Réinitialise la marge supérieure */
            font-size: 2.5em; /* Ajuste la taille du titre */
            font-weight: 700;
            letter-spacing: -0.8px;
            text-shadow: 0 2px 5px var(--vscode-shadow-light); /* Ombre de texte subtile */
        }

        /* Responsive design pour l'éditeur */
        @media (max-width: 480px) {
            #editor {
                height: 50vh; /* Ajuste la hauteur de l'éditeur sur les petits écrans */
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Édition de : <%= fileName %></h1>

        <% if (locals.message) { %>
            <p class="success-message"><%= message %></p>
        <% } %>

        <form action="/save" method="POST" class="editor-form">
            <input type="hidden" name="filePath" value="<%= filePath %>">
            <div id="editor"><%= fileContent %></div>
            <textarea id="hiddenEditorContent" name="editedContent"></textarea>
            <button type="submit" class="btn save-btn">Sauvegarder les modifications</button>
        </form>
        <a href="/" class="btn back-btn">Retour à l'upload</a>
    </div>

    <!-- Librairie Ace Editor (via CDN) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js" type="text/javascript" charset="utf-8"></script>
    <script>
        // Initialisation de Ace Editor
        var editor = ace.edit("editor");
        // Définit le thème de l'éditeur (monokai est sombre et populaire)
        editor.setTheme("ace/theme/monokai");
        // Active les numéros de ligne et d'autres options
        editor.setOptions({
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            enableSnippets: true,
            showPrintMargin: false, // Cache la ligne verticale de marge d'impression
            highlightActiveLine: true,
            tabSize: 4,
            useSoftTabs: true,
            wrap: true // Retour à la ligne automatique
        });

        // Détecte le mode de coloration syntaxique en fonction de l'extension du fichier
        const fileName = "<%= fileName %>";
        const fileExtension = fileName.split('.').pop().toLowerCase(); // Récupère l'extension et la met en minuscules
        let mode = 'text'; // Mode par défaut

        switch (fileExtension) {
            case 'js':
                mode = 'javascript';
                break;
            case 'html':
                mode = 'html';
                break;
            case 'css':
                mode = 'css';
                break;
            case 'json':
                mode = 'json';
                break;
            case 'md':
                mode = 'markdown';
                break;
            case 'py':
                mode = 'python';
                break;
            case 'java':
                mode = 'java';
                break;
            case 'c':
            case 'cpp': // Pour C et C++
                mode = 'c_cpp';
                break;
            case 'php':
                mode = 'php';
                break;
            case 'rb':
                mode = 'ruby';
                break;
            case 'sh':
                mode = 'sh'; // Pour les scripts shell
                break;
            case 'sql':
                mode = 'sql';
                break;
            case 'xml':
                mode = 'xml';
                break;
            case 'yml':
            case 'yaml':
                mode = 'yaml';
                break;
            case 'go':
                mode = 'go';
                break;
            // Ajoute d'autres extensions et modes si nécessaire
            default:
                mode = 'text'; // Si l'extension n'est pas reconnue, utilise le mode texte simple
        }
        editor.session.setMode("ace/mode/" + mode);

        // Synchronise le contenu de Ace Editor avec le textarea caché avant la soumission du formulaire
        document.querySelector('.editor-form').addEventListener('submit', function() {
            document.getElementById('hiddenEditorContent').value = editor.getValue();
        });
    </script>
</body>
</html>
